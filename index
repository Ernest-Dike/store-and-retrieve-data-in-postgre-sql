// index.js

// 1. Import Dependencies
const express = require('express');
const { Pool } = require('pg'); // PostgreSQL client

// 2. Initialize Express App
const app = express();
const port = process.env.PORT || 3000;

// 3. Middleware
// Parse JSON request bodies
app.use(express.json());

// 4. Database Connection Configuration
// IMPORTANT: For production, use environment variables for database credentials.
// For example: process.env.DB_USER, process.env.DB_PASSWORD, etc.
const pool = new Pool({
    user: 'postgres',       // Your PostgreSQL username
    host: 'localhost',      // Your PostgreSQL host
    database: 'api_db',     // Your PostgreSQL database name
    password: 'your_password', // Your PostgreSQL password
    port: 5432,             // Your PostgreSQL port
});

// Test the database connection
pool.connect((err, client, release) => {
    if (err) {
        return console.error('Error acquiring client', err.stack);
    }
    console.log('Connected to PostgreSQL database!');
    client.release(); // Release the client back to the pool
});


// 5. API Endpoints / Routes

// Root route
app.get('/', (req, res) => {
    res.send('Welcome to the Express.js PostgreSQL CRUD API!');
});


// --- CRUD Operations for /users ---

// GET /users - Get all users
app.get('/users', async (req, res) => {
    try {
        const result = await pool.query('SELECT * FROM users ORDER BY id ASC');
        res.status(200).json(result.rows);
    } catch (err) {
        console.error(err.message);
        res.status(500).json({ message: 'Internal Server Error' });
    }
});

// GET /users/:id - Get a specific user
app.get('/users/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const result = await pool.query('SELECT * FROM users WHERE id = $1', [id]);
        
        if (result.rows.length === 0) {
            return res.status(404).json({ message: 'User not found.' });
        }
        
        res.status(200).json(result.rows[0]);
    } catch (err) {
        console.error(err.message);
        res.status(500).json({ message: 'Internal Server Error' });
    }
});

// POST /users - Create a new user
app.post('/users', async (req, res) => {
    const { name, email, age } = req.body;

    // Basic validation
    if (!name || !email || !age) {
        return res.status(400).json({ message: 'Bad Request. Name, email, and age are required.' });
    }

    try {
        const result = await pool.query(
            'INSERT INTO users (name, email, age) VALUES ($1, $2, $3) RETURNING *',
            [name, email, age]
        );
        res.status(201).json(result.rows[0]);
    } catch (err) {
        console.error(err.message);
        // Handle specific errors, e.g., unique constraint violation for email
        if (err.code === '23505') { // unique_violation
             return res.status(409).json({ message: 'Conflict. Email already exists.' });
        }
        res.status(500).json({ message: 'Internal Server Error' });
    }
});

// PUT /users/:id - Update a user
app.put('/users/:id', async (req, res) => {
    const { id } = req.params;
    const { name, email, age } = req.body;

    // Basic validation
    if (!name || !email || !age) {
        return res.status(400).json({ message: 'Bad Request. Name, email, and age are required.' });
    }

    try {
        const result = await pool.query(
            'UPDATE users SET name = $1, email = $2, age = $3 WHERE id = $4 RETURNING *',
            [name, email, age, id]
        );

        if (result.rows.length === 0) {
            return res.status(404).json({ message: 'User not found.' });
        }
        
        res.status(200).json(result.rows[0]);
    } catch (err) {
        console.error(err.message);
        res.status(500).json({ message: 'Internal Server Error' });
    }
});

// DELETE /users/:id - Delete a user
app.delete('/users/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const result = await pool.query('DELETE FROM users WHERE id = $1 RETURNING *', [id]);
        
        if (result.rowCount === 0) {
            return res.status(404).json({ message: 'User not found.' });
        }

        // Send a confirmation message
        res.status(200).json({ message: 'User deleted successfully.' });
    } catch (err) {
        console.error(err.message);
        res.status(500).json({ message: 'Internal Server Error' });
    }
});


// 6. Generic Error Handler for invalid routes
app.use((req, res) => {
    res.status(404).json({ message: 'Route not found.' });
});


// 7. Start the server
app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});
